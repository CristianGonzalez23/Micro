version: '3.8'

services:
  kong:
    image: kong:latest
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
    ports:
      - "8000:8000"  # Proxy de Kong
      - "8001:8001"  # Administración de Kong
    volumes:
      - ./kong.yml:/usr/local/kong/declarative/kong.yml
    networks:
      my_network:
        ipv4_address: 172.18.0.10

  # Servicio de Konga
  konga:
    image: pantsel/konga:latest
    container_name: konga
    environment:
      - "KONG_ADMIN_URL=http://kong:8001"  # URL de administración de Kong
    ports:
      - "1337:1337"  # Puerto para acceder a Konga
    depends_on:
      - kong  # Asegurarse de que Kong esté levantado antes de iniciar Konga
    networks:
      my_network:
        ipv4_address: 172.18.0.22

  app:
    build: .
    container_name: python_app
    ports:
      - "5000:5000"
    environment:
      - MYSQL_USER=root
      - MYSQL_PASSWORD=rootpassword
      - MYSQL_DB=mydatabase
      - MYSQL_HOST=mysql_db
      - MYSQL_PORT=3306
    volumes:
      - ./static:/app/static
    networks:
      my_network:
        ipv4_address: 172.18.0.11

  db:
    image: mysql:5.7
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      my_network:
        ipv4_address: 172.18.0.12

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      my_network:
        ipv4_address: 172.18.0.13

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      my_network:
        ipv4_address: 172.18.0.14

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.1
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      my_network:
        ipv4_address: 172.18.0.15

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      my_network:
        ipv4_address: 172.18.0.16

  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    container_name: jenkins
    ports:
      - "8085:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      my_network:
        ipv4_address: 172.18.0.17

  notification_service:
    build:
      context: ./notification_service
    container_name: notification_service
    ports:
      - "5005:5005"
    environment:
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - EMAIL=cristianr.gonzalezi@uqvirtual.edu.co
      - PASSWORD=Crisgonza_20
    networks:
      my_network:
        ipv4_address: 172.18.0.18

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./rules.yml:/etc/prometheus/rules.yml
    ports:
      - "9090:9090"
    depends_on:
      - notification_service
    networks:
      my_network:
        ipv4_address: 172.18.0.19

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      my_network:
        ipv4_address: 172.18.0.20

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      my_network:
        ipv4_address: 172.18.0.21

networks:
  my_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16

volumes:
  db_data:
  rabbitmq_data:
  es_data:
  jenkins_home:
  grafana_data:
